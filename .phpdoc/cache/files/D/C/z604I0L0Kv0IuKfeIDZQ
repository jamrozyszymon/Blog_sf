1687485560
waR3U4bTeM%3A8dab1ccec64dc04a454c56ff42072471-b21935a7d9916f3aaa87177614e0dda9
s:7628:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImIyMTkzNWE3ZDk5MTZmM2FhYTg3MTc3NjE0ZTBkZGE5IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTE6InNlc3Npb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjA6InZlbmRvci9zeW1mb255L2ZyYW1ld29yay1idW5kbGUvUmVzb3VyY2VzL2NvbmZpZy9zZXNzaW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NDQ5OToiPD9waHAKCi8qCiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBTeW1mb255IHBhY2thZ2UuCiAqCiAqIChjKSBGYWJpZW4gUG90ZW5jaWVyIDxmYWJpZW5Ac3ltZm9ueS5jb20+CiAqCiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLgogKi8KCm5hbWVzcGFjZSBTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3I7Cgp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTZXNzaW9uRmFjdG9yeTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBGb3VuZGF0aW9uXFNlc3Npb25cU3RvcmFnZVxIYW5kbGVyXEFic3RyYWN0U2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxJZGVudGl0eU1hcnNoYWxsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcSGFuZGxlclxNYXJzaGFsbGluZ1Nlc3Npb25IYW5kbGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXEhhbmRsZXJcTmF0aXZlRmlsZVNlc3Npb25IYW5kbGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXEhhbmRsZXJcU2Vzc2lvbkhhbmRsZXJGYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXEhhbmRsZXJcU3RyaWN0U2Vzc2lvbkhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcTWV0YWRhdGFCYWc7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcTW9ja0ZpbGVTZXNzaW9uU3RvcmFnZUZhY3Rvcnk7CnVzZSBTeW1mb255XENvbXBvbmVudFxIdHRwRm91bmRhdGlvblxTZXNzaW9uXFN0b3JhZ2VcTmF0aXZlU2Vzc2lvblN0b3JhZ2VGYWN0b3J5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcSHR0cEZvdW5kYXRpb25cU2Vzc2lvblxTdG9yYWdlXFBocEJyaWRnZVNlc3Npb25TdG9yYWdlRmFjdG9yeTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XEh0dHBLZXJuZWxcRXZlbnRMaXN0ZW5lclxTZXNzaW9uTGlzdGVuZXI7CgpyZXR1cm4gc3RhdGljIGZ1bmN0aW9uIChDb250YWluZXJDb25maWd1cmF0b3IgJGNvbnRhaW5lcikgewogICAgJGNvbnRhaW5lci0+cGFyYW1ldGVycygpLT5zZXQoJ3Nlc3Npb24ubWV0YWRhdGEuc3RvcmFnZV9rZXknLCAnX3NmMl9tZXRhJyk7CgogICAgJGNvbnRhaW5lci0+c2VydmljZXMoKQogICAgICAgIC0+c2V0KCdzZXNzaW9uLmZhY3RvcnknLCBTZXNzaW9uRmFjdG9yeTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeScpLAogICAgICAgICAgICAgICAgW3NlcnZpY2UoJ3Nlc3Npb25fbGlzdGVuZXInKSwgJ29uU2Vzc2lvblVzYWdlJ10sCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLnN0b3JhZ2UuZmFjdG9yeS5uYXRpdmUnLCBOYXRpdmVTZXNzaW9uU3RvcmFnZUZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24uc3RvcmFnZS5vcHRpb25zJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLmhhbmRsZXInKSwKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgXSkKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkucGhwX2JyaWRnZScsIFBocEJyaWRnZVNlc3Npb25TdG9yYWdlRmFjdG9yeTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLmhhbmRsZXInKSwKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgXSkKICAgICAgICAtPnNldCgnc2Vzc2lvbi5zdG9yYWdlLmZhY3RvcnkubW9ja19maWxlJywgTW9ja0ZpbGVTZXNzaW9uU3RvcmFnZUZhY3Rvcnk6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5jYWNoZV9kaXInKS4nL3Nlc3Npb25zJywKICAgICAgICAgICAgICAgICdNT0NLU0VTU0lEJywKICAgICAgICAgICAgICAgIGlubGluZV9zZXJ2aWNlKE1ldGFkYXRhQmFnOjpjbGFzcykKICAgICAgICAgICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS5zdG9yYWdlX2tleScpLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSgnc2Vzc2lvbi5tZXRhZGF0YS51cGRhdGVfdGhyZXNob2xkJyksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+YWxpYXMoXFNlc3Npb25IYW5kbGVySW50ZXJmYWNlOjpjbGFzcywgJ3Nlc3Npb24uaGFuZGxlcicpCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLmhhbmRsZXIubmF0aXZlX2ZpbGUnLCBTdHJpY3RTZXNzaW9uSGFuZGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBpbmxpbmVfc2VydmljZShOYXRpdmVGaWxlU2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAgICAgICAgIC0+YXJncyhbcGFyYW0oJ3Nlc3Npb24uc2F2ZV9wYXRoJyldKSwKICAgICAgICAgICAgXSkKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb24uYWJzdHJhY3RfaGFuZGxlcicsIEFic3RyYWN0U2Vzc2lvbkhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmZhY3RvcnkoW1Nlc3Npb25IYW5kbGVyRmFjdG9yeTo6Y2xhc3MsICdjcmVhdGVIYW5kbGVyJ10pCiAgICAgICAgICAgIC0+YXJncyhbYWJzdHJhY3RfYXJnKCdBIHN0cmluZyBvciBhIGNvbm5lY3Rpb24gb2JqZWN0JyksIFtdXSkKCiAgICAgICAgLT5zZXQoJ3Nlc3Npb25fbGlzdGVuZXInLCBTZXNzaW9uTGlzdGVuZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZV9sb2NhdG9yKFsKICAgICAgICAgICAgICAgICAgICAnc2Vzc2lvbl9mYWN0b3J5JyA9PiBzZXJ2aWNlKCdzZXNzaW9uLmZhY3RvcnknKS0+aWdub3JlT25JbnZhbGlkKCksCiAgICAgICAgICAgICAgICAgICAgJ2xvZ2dlcicgPT4gc2VydmljZSgnbG9nZ2VyJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgICAgICdzZXNzaW9uX2NvbGxlY3RvcicgPT4gc2VydmljZSgnZGF0YV9jb2xsZWN0b3IucmVxdWVzdC5zZXNzaW9uX2NvbGxlY3RvcicpLT5pZ25vcmVPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgcGFyYW0oJ2tlcm5lbC5kZWJ1ZycpLAogICAgICAgICAgICAgICAgcGFyYW0oJ3Nlc3Npb24uc3RvcmFnZS5vcHRpb25zJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdrZXJuZWwuZXZlbnRfc3Vic2NyaWJlcicpCiAgICAgICAgICAgIC0+dGFnKCdrZXJuZWwucmVzZXQnLCBbJ21ldGhvZCcgPT4gJ3Jlc2V0J10pCgogICAgICAgIC0+c2V0KCdzZXNzaW9uLm1hcnNoYWxsZXInLCBJZGVudGl0eU1hcnNoYWxsZXI6OmNsYXNzKQoKICAgICAgICAtPnNldCgnc2Vzc2lvbi5tYXJzaGFsbGluZ19oYW5kbGVyJywgTWFyc2hhbGxpbmdTZXNzaW9uSGFuZGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+ZGVjb3JhdGUoJ3Nlc3Npb24uaGFuZGxlcicpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZXNzaW9uLm1hcnNoYWxsaW5nX2hhbmRsZXIuaW5uZXInKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3Nlc3Npb24ubWFyc2hhbGxlcicpLAogICAgICAgICAgICBdKQogICAgOwp9OwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YToxOntzOjU4OiJcU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiQ29uZmlndXJhdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";